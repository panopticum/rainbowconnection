#!/usr/bin/env node

const app = require('../../app');
const debug = require('debug')('rainbowconnection:server');
const http = require('http');
const cluster = require('cluster');
const os = require('os');
const logger = require('../log-service');
const config = require('../../config');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  logger.info(`Worker ${cluster.worker.id} running!`);
}

if (cluster.isMaster) {
  // Count the machine's CPUs
  const cpuCount = config.parallelWorkers || os.cpus().length;
  // Create a worker for each CPU
  for (let i = 0; i < cpuCount; ++ i) {
    cluster.fork();
  }

  // Listen for dying workers
  cluster.on('exit', (worker) => {
    // Replace the dead worker, we're not sentimental
    logger.info(`Worker ${worker.id} died!`);
    cluster.fork();
  });
  // Code to run if we're in a worker process
} else {
  /**
   * Get port from environment and store in Express.
   */
  const port = normalizePort(config.port || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.setTimeout(config.timeout);
  server.on('error', onError);
  server.on('listening', onListening);
}
